{"version":3,"sources":["components/Condition.jsx","components/validate.jsx","components/DishForm.jsx","App.jsx","index.jsx"],"names":["Condition","when","is","children","name","subscription","value","input","validate","values","errors","preparation_time","type","no_of_slices","diameter","spiciness_scale","slices_of_bread","minValue","min","isNaN","undefined","composeValidators","validators","reduce","error","validator","onSubmit","event","axios","method","url","headers","data","then","response","alert","catch","DishForm","Container","style","padding","margin","maxWidth","Typography","variant","align","component","handleSubmit","form","submitting","Paper","Grid","container","justify","alignItems","spacing","item","xs","md","fullWidth","TextField","label","Select","formControlProps","MenuItem","step","Button","color","disabled","onClick","reset","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAQeA,EANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAIC,EAAb,EAAaA,SAAb,OACd,cAAC,IAAD,CAAOC,KAAMH,EAAMI,aAAc,CAAEC,OAAO,GAA1C,SACG,qBAAGC,MAASD,QAAyBJ,EAAKC,EAAW,SCwB3CK,EA5BA,SAACC,GACd,IAAMC,EAAS,GAwBf,OAvBKD,EAAOL,OACVM,EAAON,KAAO,YAEXK,EAAOE,mBACVD,EAAOC,iBAAmB,YAEvBF,EAAOG,OACVF,EAAOE,KAAO,YAEI,UAAhBH,EAAOG,KACJH,EAAOI,cAAiBJ,EAAOK,WAClCJ,EAAOG,aAAe,WACtBH,EAAOI,SAAW,YAEK,SAAhBL,EAAOG,KACXH,EAAOM,kBACVL,EAAOK,gBAAkB,YAEF,aAAhBN,EAAOG,OACXH,EAAOO,kBACVN,EAAOM,gBAAkB,aAGtBN,G,8DChBLO,EAAW,SAACC,GAAD,OAAS,SAACZ,GAAD,OACxBa,MAAMb,IAAUA,GAASY,OAAME,EAA/B,iCAAqEF,KAEjEG,EAAoB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAmB,SAAChB,GAAD,OAC3CgB,EAAWC,QAAO,SAACC,EAAOC,GAAR,OAAsBD,GAASC,EAAUnB,UAAQc,KAE/DM,EAAW,SAAAC,GACbC,IAAM,CACFC,OAAQ,OACRC,IAAK,qDACLC,QAAS,CAAE,eAAgB,oBAC3BC,KAAM,CACF5B,KAAMuB,EAAMvB,KACZO,iBAAkBgB,EAAMhB,iBACxBC,KAAMe,EAAMf,KACZC,aAAcc,EAAMd,aACpBC,SAAUa,EAAMb,SAChBC,gBAAiBY,EAAMZ,gBACvBC,gBAAiBW,EAAMX,mBAG1BiB,MAAK,SAAUC,GACZC,MAAMD,MAETE,OAAM,SAAUF,GACbC,MAAMD,OA4HHG,EAxHE,kBACb,eAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,QAAS,GAAIC,OAAQ,OAAQC,SAAU,KAA3D,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,SAASC,UAAU,KAAKP,MAAO,CAAEC,QAAS,IAAzE,+BAGA,cAAC,IAAD,CACId,SAAUA,EACVlB,SAAUA,EAFd,SAIK,gBAAGuC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,WAAvB,EAAmCxC,OAAnC,OACG,sBAAMiB,SAAUqB,EAAhB,SACI,cAACG,EAAA,EAAD,CAAOX,MAAO,CAAEC,QAAS,IAAzB,SACI,eAACW,EAAA,EAAD,CACIC,WAAS,EACTC,QAAQ,aACRC,WAAW,SACXC,QAAS,EAJb,UAKI,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACI,cAAC,IAAD,CACItD,KAAK,OACLuD,WAAS,EACTb,UAAWc,YACXhD,KAAK,OACLiD,MAAM,gBAGd,cAACV,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACI,cAAC,IAAD,CACItD,KAAK,mBACLuD,WAAS,EACTb,UAAWc,YACXhD,KAAK,OACLiD,MAAM,uBAGd,cAACV,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACI,eAAC,IAAD,CACIrD,KAAK,OACL0C,UAAWgB,SACXD,MAAM,mBACNE,iBAAkB,CAAEJ,WAAW,GAJnC,UAMI,cAACK,EAAA,EAAD,CAAU1D,MAAM,QAAhB,mBAAyC,IACzC,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,OAAhB,kBAAuC,IACvC,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,WAAhB,sBAA+C,SAGvD,eAAC,EAAD,CAAWL,KAAK,OAAOC,GAAG,QAA1B,UACI,cAACiD,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACI,cAAC,IAAD,CACIrD,KAAK,eACL0C,UAAWc,YACXhD,KAAK,SACLJ,SAAUa,EAAkBJ,EAAS,IACrC4C,MAAM,uBAGd,cAACV,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACI,cAAC,IAAD,CACIrD,KAAK,WACL0C,UAAWc,YACXhD,KAAK,SACLqD,KAAK,MACLzD,SAAUa,EAAkBJ,EAAS,KACrC4C,MAAM,kBAIlB,cAAC,EAAD,CAAW5D,KAAK,OAAOC,GAAG,OAA1B,SACI,cAACiD,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACI,eAAC,IAAD,CACIrD,KAAK,kBACL0C,UAAWgB,SACXC,iBAAkB,CAAEJ,WAAW,GAC/BE,MAAM,kBAJV,UAMI,cAACG,EAAA,EAAD,CAAU1D,MAAM,IAAhB,eACA,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,IAAhB,eACA,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,IAAhB,eACA,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,IAAhB,eACA,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,IAAhB,eACA,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,IAAhB,eACA,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,IAAhB,eACA,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,IAAhB,eACA,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,IAAhB,eACA,cAAC0D,EAAA,EAAD,CAAU1D,MAAM,KAAhB,uBAIZ,cAAC,EAAD,CAAWL,KAAK,OAAOC,GAAG,WAA1B,SACI,cAACiD,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAf,SACI,cAAC,IAAD,CACIrD,KAAK,kBACL0C,UAAWc,YACXhD,KAAK,SACLJ,SAAUa,EAAkBJ,EAAS,IACrC4C,MAAM,wBAIlB,eAACV,EAAA,EAAD,CAAMC,WAAS,EACfC,QAAQ,eACRC,WAAW,SACXf,MAAO,CAAEC,QAAS,IAHlB,UAII,cAAC0B,EAAA,EAAD,CAAQtB,QAAQ,YAAYuB,MAAM,UAAUvD,KAAK,SAASwD,SAAUnB,EAApE,oBAGA,cAACiB,EAAA,EAAD,CAAQtB,QAAQ,YAAYuB,MAAM,YAAYvD,KAAK,SAASyD,QAASrB,EAAKsB,MAAOF,SAAUnB,EAA3F,oCC/IjB,SAASsB,IACtB,OACI,cAAC,EAAD,ICCNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACH,EAAD,MAEFI,SAASC,eAAe,U","file":"static/js/main.8003c9fb.chunk.js","sourcesContent":["import { Field } from 'react-final-form';\r\n\r\nconst Condition = ({ when, is, children }) => (\r\n    <Field name={when} subscription={{ value: true }}>\r\n      {({ input: { value } }) => (value === is ? children : null)}\r\n    </Field>\r\n)\r\n\r\nexport default Condition;","const validate = (values) => {\r\n    const errors = {};\r\n    if (!values.name) {\r\n      errors.name = \"Required\";\r\n    }\r\n    if (!values.preparation_time) {\r\n      errors.preparation_time = \"Required\";\r\n    }\r\n    if (!values.type) {\r\n      errors.type = \"Required\";\r\n    }\r\n    if (values.type === \"pizza\") {\r\n      if (!values.no_of_slices && !values.diameter) {\r\n        errors.no_of_slices = \"Required\";\r\n        errors.diameter = \"Required\";\r\n      }\r\n    } else if (values.type === \"soup\") {\r\n      if (!values.spiciness_scale) {\r\n        errors.spiciness_scale = \"Required\";\r\n      }\r\n    } else if (values.type === \"sandwich\") {\r\n      if (!values.slices_of_bread) {\r\n        errors.slices_of_bread = \"Required\";\r\n      }\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  export default validate;","import { Form, Field } from 'react-final-form';\r\nimport axios from 'axios';\r\n\r\nimport Condition from './Condition';\r\nimport validate from \"./validate\";\r\n\r\nimport { Container, Button, MenuItem, Grid, Paper, Typography } from '@material-ui/core';\r\nimport { TextField, Select } from 'final-form-material-ui';\r\n\r\nconst minValue = (min) => (value) =>\r\n  isNaN(value) || value >= min ? undefined : `Should be greater than ${min}`;\r\n\r\nconst composeValidators = (...validators) => (value) =>\r\n  validators.reduce((error, validator) => error || validator(value), undefined);\r\n\r\nconst onSubmit = event => {\r\n    axios({\r\n        method: \"post\",\r\n        url: \"https://frosty-wood-6558.getsandbox.com:443/dishes\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        data: {\r\n            name: event.name,\r\n            preparation_time: event.preparation_time,\r\n            type: event.type,\r\n            no_of_slices: event.no_of_slices,\r\n            diameter: event.diameter,\r\n            spiciness_scale: event.spiciness_scale,\r\n            slices_of_bread: event.slices_of_bread\r\n          }\r\n    })\r\n        .then(function (response) {\r\n            alert(response);\r\n        })\r\n        .catch(function (response) {\r\n            alert(response);\r\n        });\r\n};\r\n\r\nconst DishForm = () => (\r\n    <Container style={{ padding: 16, margin: 'auto', maxWidth: 800 }}>\r\n        <Typography variant=\"h4\" align=\"center\" component=\"h1\" style={{ padding: 16 }}>\r\n          Choose your dish!\r\n        </Typography>\r\n        <Form\r\n            onSubmit={onSubmit}\r\n            validate={validate}\r\n        >\r\n            {({ handleSubmit, form, submitting, values }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <Paper style={{ padding: 16 }}>\r\n                        <Grid\r\n                            container\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                            spacing={2}>\r\n                            <Grid item xs={10} md={6}>\r\n                                <Field\r\n                                    name=\"name\"\r\n                                    fullWidth\r\n                                    component={TextField}\r\n                                    type=\"text\"\r\n                                    label=\"Dish Name\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={10} md={4}>\r\n                                <Field\r\n                                    name=\"preparation_time\"\r\n                                    fullWidth\r\n                                    component={TextField}\r\n                                    type=\"time\"\r\n                                    label=\"Preparation time\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={10}>\r\n                                <Field\r\n                                    name=\"type\"\r\n                                    component={Select}\r\n                                    label=\"Choose Dish Type\"\r\n                                    formControlProps={{ fullWidth: true }}\r\n                                >\r\n                                    <MenuItem value=\"pizza\">Pizza</MenuItem>{' '}\r\n                                    <MenuItem value=\"soup\">Soup</MenuItem>{' '}\r\n                                    <MenuItem value=\"sandwich\">Sandwich</MenuItem>{' '}\r\n                                </Field>\r\n                            </Grid>\r\n                            <Condition when=\"type\" is=\"pizza\">\r\n                                <Grid item xs={10}>\r\n                                    <Field\r\n                                        name=\"no_of_slices\"\r\n                                        component={TextField}\r\n                                        type=\"number\"\r\n                                        validate={composeValidators(minValue(4))}\r\n                                        label=\"Number of slices\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={10}>\r\n                                    <Field\r\n                                        name=\"diameter\"\r\n                                        component={TextField}\r\n                                        type=\"number\"\r\n                                        step=\"0.1\"\r\n                                        validate={composeValidators(minValue(16))}\r\n                                        label=\"Diameter\"\r\n                                    />\r\n                                </Grid>\r\n                            </Condition>\r\n                            <Condition when=\"type\" is=\"soup\">\r\n                                <Grid item xs={10}>\r\n                                    <Field\r\n                                        name=\"spiciness_scale\"\r\n                                        component={Select}\r\n                                        formControlProps={{ fullWidth: true }}\r\n                                        label=\"Spiciness scale\"\r\n                                    >\r\n                                        <MenuItem value=\"1\">1</MenuItem>\r\n                                        <MenuItem value=\"2\">2</MenuItem>\r\n                                        <MenuItem value=\"3\">3</MenuItem>\r\n                                        <MenuItem value=\"4\">4</MenuItem>\r\n                                        <MenuItem value=\"5\">5</MenuItem>\r\n                                        <MenuItem value=\"6\">6</MenuItem>\r\n                                        <MenuItem value=\"7\">7</MenuItem>\r\n                                        <MenuItem value=\"8\">8</MenuItem>\r\n                                        <MenuItem value=\"9\">9</MenuItem>\r\n                                        <MenuItem value=\"10\">10</MenuItem>\r\n                                    </Field>\r\n                                </Grid>\r\n                            </Condition>\r\n                            <Condition when=\"type\" is=\"sandwich\">\r\n                                <Grid item xs={10}>\r\n                                    <Field\r\n                                        name=\"slices_of_bread\"\r\n                                        component={TextField}\r\n                                        type=\"number\"\r\n                                        validate={composeValidators(minValue(2))}\r\n                                        label=\"Slices of bread\"\r\n                                    />\r\n                                </Grid>\r\n                            </Condition>\r\n                            <Grid container \r\n                            justify=\"space-evenly\"\r\n                            alignItems=\"center\"\r\n                            style={{ padding: 16 }}>\r\n                                <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={submitting}>\r\n                                    Submit\r\n                            </Button>\r\n                                <Button variant=\"contained\" color=\"secondary\" type=\"button\" onClick={form.reset} disabled={submitting}>\r\n                                    Reset\r\n                            </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </form>\r\n            )}\r\n        </Form>\r\n    </Container >\r\n\r\n)\r\n\r\nexport default DishForm;","import DishForm from \"./components/DishForm\";\n\nexport default function App() {\n  return (\n      <DishForm />\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}